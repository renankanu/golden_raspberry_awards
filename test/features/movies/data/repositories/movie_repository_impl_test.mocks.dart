// Mocks generated by Mockito 5.4.4 from annotations
// in golden_raspberry_awards/test/features/movies/data/repositories/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:golden_raspberry_awards/features/movies/data/datasource/movie_datasource.dart'
    as _i3;
import 'package:golden_raspberry_awards/features/movies/data/models/models.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProducersIntervalVictoriesModel_0 extends _i1.SmartFake
    implements _i2.ProducersIntervalVictoriesModel {
  _FakeProducersIntervalVictoriesModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieListingsModel_1 extends _i1.SmartFake
    implements _i2.MovieListingsModel {
  _FakeMovieListingsModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDatasource extends _i1.Mock implements _i3.MovieDatasource {
  MockMovieDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MultiWinnerYearModel>> getMultiWinnerYears() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMultiWinnerYears,
          [],
        ),
        returnValue: _i4.Future<List<_i2.MultiWinnerYearModel>>.value(
            <_i2.MultiWinnerYearModel>[]),
      ) as _i4.Future<List<_i2.MultiWinnerYearModel>>);

  @override
  _i4.Future<_i2.ProducersIntervalVictoriesModel>
      getProducersIntervalVictories() => (super.noSuchMethod(
            Invocation.method(
              #getProducersIntervalVictories,
              [],
            ),
            returnValue: _i4.Future<_i2.ProducersIntervalVictoriesModel>.value(
                _FakeProducersIntervalVictoriesModel_0(
              this,
              Invocation.method(
                #getProducersIntervalVictories,
                [],
              ),
            )),
          ) as _i4.Future<_i2.ProducersIntervalVictoriesModel>);

  @override
  _i4.Future<List<_i2.MovieModel>> getWinnersByYear(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWinnersByYear,
          [year],
        ),
        returnValue: _i4.Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]),
      ) as _i4.Future<List<_i2.MovieModel>>);

  @override
  _i4.Future<List<_i2.TopWinningStudiosModel>> getTopWinningStudios() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopWinningStudios,
          [],
        ),
        returnValue: _i4.Future<List<_i2.TopWinningStudiosModel>>.value(
            <_i2.TopWinningStudiosModel>[]),
      ) as _i4.Future<List<_i2.TopWinningStudiosModel>>);

  @override
  _i4.Future<_i2.MovieListingsModel> getMovies({
    required int? page,
    required int? size,
    int? year,
    bool? isWinner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
          {
            #page: page,
            #size: size,
            #year: year,
            #isWinner: isWinner,
          },
        ),
        returnValue:
            _i4.Future<_i2.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getMovies,
            [],
            {
              #page: page,
              #size: size,
              #year: year,
              #isWinner: isWinner,
            },
          ),
        )),
      ) as _i4.Future<_i2.MovieListingsModel>);
}
