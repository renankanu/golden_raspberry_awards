// Mocks generated by Mockito 5.4.4 from annotations
// in golden_raspberry_awards/test/_utils/mock/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:dio/dio.dart' as _i9;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i11;
import 'package:dio/src/dio_mixin.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:fpdart/fpdart.dart' as _i12;
import 'package:golden_raspberry_awards/core/errors/failure.dart' as _i13;
import 'package:golden_raspberry_awards/features/movies/data/datasource/movie_datasource.dart'
    as _i16;
import 'package:golden_raspberry_awards/features/movies/data/models/models.dart'
    as _i7;
import 'package:golden_raspberry_awards/features/movies/domain/entities/entities.dart'
    as _i14;
import 'package:golden_raspberry_awards/features/movies/domain/repositories/movie_repository.dart'
    as _i8;
import 'package:golden_raspberry_awards/features/movies/domain/usecases/movie_usecases.dart'
    as _i17;
import 'package:golden_raspberry_awards/features/movies/domain/usecases/multi_winner_years_usecases.dart'
    as _i18;
import 'package:golden_raspberry_awards/features/movies/domain/usecases/producers_interval_victories_usecases.dart'
    as _i19;
import 'package:golden_raspberry_awards/features/movies/domain/usecases/top_winning_studios_usecases.dart'
    as _i20;
import 'package:golden_raspberry_awards/features/movies/domain/usecases/winner_by_year_usecases.dart'
    as _i21;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseOptions_0 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_1 extends _i1.SmartFake
    implements _i3.HttpClientAdapter {
  _FakeHttpClientAdapter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_2 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_3 extends _i1.SmartFake implements _i5.Interceptors {
  _FakeInterceptors_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4<T1> extends _i1.SmartFake implements _i6.Response<T1> {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProducersIntervalVictoriesModel_5 extends _i1.SmartFake
    implements _i7.ProducersIntervalVictoriesModel {
  _FakeProducersIntervalVictoriesModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieListingsModel_6 extends _i1.SmartFake
    implements _i7.MovieListingsModel {
  _FakeMovieListingsModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRepository_7 extends _i1.SmartFake
    implements _i8.MovieRepository {
  _FakeMovieRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i9.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i3.HttpClientAdapter);

  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);

  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i5.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i6.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i11.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i11.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i10.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<dynamic>>);

  @override
  _i10.Future<_i6.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i11.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i10.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<dynamic>>);

  @override
  _i10.Future<_i6.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i11.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i11.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);

  @override
  _i10.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i10.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i10.Future<_i6.Response<T>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i8.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>
      getMultiWinnerYears() => (super.noSuchMethod(
            Invocation.method(
              #getMultiWinnerYears,
              [],
            ),
            returnValue: _i10.Future<
                    _i12
                    .Either<_i13.Failure, List<_i14.MultiWinnerYear>>>.value(
                _i15.dummyValue<
                    _i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>(
              this,
              Invocation.method(
                #getMultiWinnerYears,
                [],
              ),
            )),
          ) as _i10
              .Future<_i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>);

  @override
  _i10.Future<_i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>
      getProducersIntervalVictories() => (super.noSuchMethod(
            Invocation.method(
              #getProducersIntervalVictories,
              [],
            ),
            returnValue: _i10.Future<
                    _i12
                    .Either<_i13.Failure, _i14.ProducersIntervalWins>>.value(
                _i15.dummyValue<
                    _i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>(
              this,
              Invocation.method(
                #getProducersIntervalVictories,
                [],
              ),
            )),
          ) as _i10
              .Future<_i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>);

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>> getWinnersByYear(
          int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWinnersByYear,
          [year],
        ),
        returnValue:
            _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>>.value(
                _i15.dummyValue<_i12.Either<_i13.Failure, List<_i14.Movie>>>(
          this,
          Invocation.method(
            #getWinnersByYear,
            [year],
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>>);

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>
      getTopWinningStudios() => (super.noSuchMethod(
            Invocation.method(
              #getTopWinningStudios,
              [],
            ),
            returnValue: _i10.Future<
                    _i12
                    .Either<_i13.Failure, List<_i14.TopWinningStudios>>>.value(
                _i15.dummyValue<
                    _i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>(
              this,
              Invocation.method(
                #getTopWinningStudios,
                [],
              ),
            )),
          ) as _i10
              .Future<_i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>);

  @override
  _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>> getMovies({
    required int? page,
    required int? size,
    int? year,
    bool? isWinner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
          {
            #page: page,
            #size: size,
            #year: year,
            #isWinner: isWinner,
          },
        ),
        returnValue:
            _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>>.value(
                _i15.dummyValue<_i12.Either<_i13.Failure, _i14.MoviesListings>>(
          this,
          Invocation.method(
            #getMovies,
            [],
            {
              #page: page,
              #size: size,
              #year: year,
              #isWinner: isWinner,
            },
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>>);
}

/// A class which mocks [MovieDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDatasource extends _i1.Mock implements _i16.MovieDatasource {
  MockMovieDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i7.MultiWinnerYearModel>> getMultiWinnerYears() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMultiWinnerYears,
          [],
        ),
        returnValue: _i10.Future<List<_i7.MultiWinnerYearModel>>.value(
            <_i7.MultiWinnerYearModel>[]),
      ) as _i10.Future<List<_i7.MultiWinnerYearModel>>);

  @override
  _i10.Future<_i7.ProducersIntervalVictoriesModel>
      getProducersIntervalVictories() => (super.noSuchMethod(
            Invocation.method(
              #getProducersIntervalVictories,
              [],
            ),
            returnValue: _i10.Future<_i7.ProducersIntervalVictoriesModel>.value(
                _FakeProducersIntervalVictoriesModel_5(
              this,
              Invocation.method(
                #getProducersIntervalVictories,
                [],
              ),
            )),
          ) as _i10.Future<_i7.ProducersIntervalVictoriesModel>);

  @override
  _i10.Future<List<_i7.MovieModel>> getWinnersByYear(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWinnersByYear,
          [year],
        ),
        returnValue:
            _i10.Future<List<_i7.MovieModel>>.value(<_i7.MovieModel>[]),
      ) as _i10.Future<List<_i7.MovieModel>>);

  @override
  _i10.Future<List<_i7.TopWinningStudiosModel>> getTopWinningStudios() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopWinningStudios,
          [],
        ),
        returnValue: _i10.Future<List<_i7.TopWinningStudiosModel>>.value(
            <_i7.TopWinningStudiosModel>[]),
      ) as _i10.Future<List<_i7.TopWinningStudiosModel>>);

  @override
  _i10.Future<_i7.MovieListingsModel> getMovies({
    required int? page,
    required int? size,
    int? year,
    bool? isWinner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
          {
            #page: page,
            #size: size,
            #year: year,
            #isWinner: isWinner,
          },
        ),
        returnValue:
            _i10.Future<_i7.MovieListingsModel>.value(_FakeMovieListingsModel_6(
          this,
          Invocation.method(
            #getMovies,
            [],
            {
              #page: page,
              #size: size,
              #year: year,
              #isWinner: isWinner,
            },
          ),
        )),
      ) as _i10.Future<_i7.MovieListingsModel>);
}

/// A class which mocks [MovieUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieUsecase extends _i1.Mock implements _i17.MovieUsecase {
  MockMovieUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_7(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i8.MovieRepository);

  @override
  _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>> call({
    required int? page,
    required int? size,
    int? year,
    bool? isWinner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #page: page,
            #size: size,
            #year: year,
            #isWinner: isWinner,
          },
        ),
        returnValue:
            _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>>.value(
                _i15.dummyValue<_i12.Either<_i13.Failure, _i14.MoviesListings>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #page: page,
              #size: size,
              #year: year,
              #isWinner: isWinner,
            },
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, _i14.MoviesListings>>);
}

/// A class which mocks [MultiWinnerYearsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiWinnerYearsUseCase extends _i1.Mock
    implements _i18.MultiWinnerYearsUseCase {
  MockMultiWinnerYearsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.MovieRepository);

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i10.Future<
                _i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>.value(
            _i15.dummyValue<
                _i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, List<_i14.MultiWinnerYear>>>);
}

/// A class which mocks [ProducersIntervalVictoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProducersIntervalVictoriesUseCase extends _i1.Mock
    implements _i19.ProducersIntervalVictoriesUseCase {
  MockProducersIntervalVictoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.MovieRepository);

  @override
  _i10.Future<_i12.Either<_i13.Failure, _i14.ProducersIntervalWins>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i10.Future<
                _i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>.value(
            _i15.dummyValue<
                _i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, _i14.ProducersIntervalWins>>);
}

/// A class which mocks [TopWinningStudiosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopWinningStudiosUseCase extends _i1.Mock
    implements _i20.TopWinningStudiosUseCase {
  MockTopWinningStudiosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.MovieRepository);

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i10.Future<
                _i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>.value(
            _i15.dummyValue<
                _i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10
          .Future<_i12.Either<_i13.Failure, List<_i14.TopWinningStudios>>>);
}

/// A class which mocks [WinnerByYearUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWinnerByYearUseCase extends _i1.Mock
    implements _i21.WinnerByYearUseCase {
  MockWinnerByYearUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.MovieRepository);

  @override
  _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>> call(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [year],
        ),
        returnValue:
            _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>>.value(
                _i15.dummyValue<_i12.Either<_i13.Failure, List<_i14.Movie>>>(
          this,
          Invocation.method(
            #call,
            [year],
          ),
        )),
      ) as _i10.Future<_i12.Either<_i13.Failure, List<_i14.Movie>>>);
}
